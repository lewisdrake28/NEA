///////////////////////////////////////////
// View designers/MasterView.Designer.cs //
///////////////////////////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class MasterView : Window
    {
        public void Build()
        {
            Title = "Spell Checker " + this;

            var menuBar = new MenuBar(new MenuBarItem[] {
                new MenuBarItem("_File", new MenuItem[] {
                    new MenuItem("_Quit", "", () => {
                        Application.Shutdown();
                    }),
                    
                    new MenuItem("_Settings", "", () => {
                        Application.Run(new Settings());
                    }),

                    new MenuItem("_Main View", "", () => {
                        Application.Run(new MainView());
                    }),

                    new MenuItem("_Dictionary", "", () => {
                        Application.Run(new Dictionary());
                    })
                })
            });
            Add(menuBar);
        }
    }
}


/////////////////////////////////////////
// View designers/Settings.Designer.cs //
/////////////////////////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class Settings : MasterView
    {
        protected Button viewDictBtn = new Button();
        protected Button saveBtn = new Button();
        protected Button resetBtn = new Button();

        protected CheckBox spellCheckCbx = new CheckBox();
        protected CheckBox changeAcronymsCbx = new CheckBox();
        protected CheckBox grammarCheckCbx = new CheckBox();

        protected ColorPicker backgroundPick = new ColorPicker();
        protected ColorPicker foregroundPick = new ColorPicker();

        protected Label spellCheckLab = new Label();
        protected Label viewDictLab = new Label();
        protected Label maxLengthLab = new Label();
        protected Label changeAcryonymsLab = new Label();
        protected Label grammarCheckLab = new Label();

        protected TextField maxLengthTxt = new TextField();

        protected void InitializeComponent()
        {
            // build labels
            spellCheckLab.Text = "Spell check";
            spellCheckLab.X = 2;
            spellCheckLab.Y = 2;

            viewDictLab.Text = "View dictionary";
            viewDictLab.X = spellCheckLab.X;
            viewDictLab.Y = spellCheckLab.Y + 2;

            maxLengthLab.Text = "Maximum length                For no max length, enter \"0\"";
            maxLengthLab.X = spellCheckLab.X;
            maxLengthLab.Y = viewDictLab.Y + 2;

            changeAcryonymsLab.Text = "Change acronyms";
            changeAcryonymsLab.X = spellCheckLab.X;
            changeAcryonymsLab.Y = maxLengthLab.Y + 2;

            grammarCheckLab.Text = "Grammar check";
            grammarCheckLab.X = spellCheckLab.X;
            grammarCheckLab.Y = changeAcryonymsLab.Y + 2;

            Add(spellCheckLab, viewDictLab, maxLengthLab, changeAcryonymsLab, grammarCheckLab);

            // build check boxes
            spellCheckCbx.X = spellCheckLab.X + 20;
            spellCheckCbx.Y = spellCheckLab.Y;
            spellCheckCbx.Checked = spellCheck;

            changeAcronymsCbx.X = spellCheckCbx.X;
            changeAcronymsCbx.Y = changeAcryonymsLab.Y;
            changeAcronymsCbx.Checked = changeAcronyms;

            grammarCheckCbx.X = spellCheckCbx.X;
            grammarCheckCbx.Y = grammarCheckLab.Y;
            grammarCheckCbx.Checked = grammarCheck;

            Add(spellCheckCbx, changeAcronymsCbx, grammarCheckCbx);

            // build buttons
            viewDictBtn.Text = "View";
            viewDictBtn.X = spellCheckCbx.X;
            viewDictBtn.Y = viewDictLab.Y;

            saveBtn.Text = "_Save";
            saveBtn.X = maxLengthLab.X;
            saveBtn.Y = grammarCheckLab.Y + 2;
            saveBtn.IsDefault = true;

            resetBtn.X = maxLengthLab.X;
            resetBtn.Y = saveBtn.Y + 2;
            resetBtn.Text = "Reset to default settings";

            Add(viewDictBtn, saveBtn, resetBtn);

            // build text fields
            maxLengthTxt.X = spellCheckCbx.X;
            maxLengthTxt.Y = maxLengthLab.Y;
            maxLengthTxt.Width = 8;
            maxLengthTxt.Text = maxLength.ToString();

            Add(maxLengthTxt);

            // build color elements
            backgroundPick.X = maxLengthLab.X;
            backgroundPick.Y = resetBtn.Y + 2;
            backgroundPick.Text = "Background colour";
            backgroundPick.SelectedColor = background;

            foregroundPick.X = 38;
            foregroundPick.Y = backgroundPick.Y;
            foregroundPick.Text = "Foreground colour";
            foregroundPick.SelectedColor = foreground;

            Add(backgroundPick, foregroundPick);
        }
    }
}


/////////////////////////////////////////
// View designers/MainView.Designer.cs //
/////////////////////////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class MainView : MasterView
    {
        protected Button spellBtn = new Button();
        protected Button clearBtn = new Button();

        protected Label lengthLab = new Label();

        protected TextView textEntry = new TextView();

        protected void InitializeComponent()
        {
            //
            textEntry.X = 1;
            textEntry.Y = 2;
            textEntry.Width = 76;
            textEntry.Height = 5;
            textEntry.WordWrap = true;

            Add(textEntry);

            //
            spellBtn.Text = "Spell check";
            spellBtn.X = 1;
            spellBtn.Y = 20;

            clearBtn.Text = "Clear text";
            clearBtn.X = spellBtn.X + spellBtn.Text.Length + 6;
            clearBtn.Y = spellBtn.Y;

            Add(spellBtn, clearBtn);
        }
    }
}


///////////////////////////////////////////
// View designers/Dictionary.Designer.cs //
///////////////////////////////////////////

// install dependencies
using Terminal.Gui;
using NStack;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class Dictionary : MasterView
    {
        protected Button lookupBtn = new Button();
        protected Button nextBtn = new Button();
        protected Button prevBtn = new Button();
        protected Button defineBtn = new Button();
        protected Button addBtn = new Button();
        protected Button removeBtn = new Button();
        protected Button filterBtn = new Button();

        protected Label[] wordLabs = new Label[101988];

        protected RadioGroup filterRad = new RadioGroup();

        protected TextField lookupTxt = new TextField();

        protected void InitializeComponent()
        {
            // build lookup elements 
            lookupTxt.X = 50;
            lookupTxt.Y = 4;
            lookupTxt.Width = 14;

            lookupBtn.Text = "Lookup";
            lookupBtn.X = lookupTxt.X;
            lookupBtn.Y = lookupTxt.Y + 2;

            Add(lookupBtn, lookupTxt);

            // build navigation elements
            nextBtn.Text = "Next page";
            nextBtn.X = 64;
            nextBtn.Y = 21;

            prevBtn.Text = "Prev page";
            prevBtn.X = nextBtn.X - 14;
            prevBtn.Y = nextBtn.Y;

            Add(prevBtn, nextBtn);

            // build functional buttons
            defineBtn.X = lookupTxt.X;
            defineBtn.Y = lookupBtn.Y + 2;
            defineBtn.Text = "Define word";

            addBtn.X = lookupTxt.X;
            addBtn.Y = defineBtn.Y + 2;
            addBtn.Text = "Add word";

            removeBtn.X = lookupTxt.X;
            removeBtn.Y = addBtn.Y + 2;
            removeBtn.Text = "Remove word";

            Add(defineBtn, addBtn, removeBtn);

            // build fitering elements
            filterRad.X = lookupTxt.X;
            filterRad.Y = removeBtn.Y + 2;
            filterRad.RadioLabels = new ustring[] { "All words", "Default words", "Added words" };

            filterBtn.X = lookupTxt.X;
            filterBtn.Y = filterRad.Y + 4;
            filterBtn.Text = "Filter list";

            Add(filterRad, filterBtn);
        }
    }
}


/////////////////////////////////////////////
// View designers/SkeletonView.Designer.cs //
/////////////////////////////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class SpellCheck : MasterView
    {
        protected Button ignoreBtn = new Button();
        protected Button userBtn = new Button();
        protected Button acronymBtn = new Button();
        protected Button HomeBtn = new Button();
        protected Button HomeBtn2 = new Button();
        protected Button replaceBtn = new Button();
        protected Button addBtn = new Button();
        protected Button resizeBtn = new Button();

        protected Label lookupLab = new Label();
        protected Label lookupLab2 = new Label();
        protected Label lookupLab3 = new Label();
        protected Label userLab = new Label();
        protected List<Label> wordLabs = new List<Label>();

        protected TextField lookupTxt = new TextField();
        protected TextField userTxt = new TextField();

        protected void InitializeComponent()
        {
            // build lookup elements
            lookupLab.Text = "Enter word from left side";
            lookupLab.X = 50;
            lookupLab.Y = 2;

            lookupLab2.Text = "in the field below.";
            lookupLab2.X = lookupLab.X;
            lookupLab2.Y = lookupLab.Y + 1;

            lookupLab3.Text = "Then handle error";
            lookupLab3.X = lookupLab.X;
            lookupLab3.Y = lookupLab2.Y + 1;

            lookupTxt.X = lookupLab.X;
            lookupTxt.Y = lookupLab3.Y + 1;
            lookupTxt.Width = 14;

            Add(lookupLab, lookupLab2, lookupLab3, lookupTxt, lookupTxt);

            // 
            ignoreBtn.X = lookupLab.X;
            ignoreBtn.Y = lookupTxt.Y + 2;
            ignoreBtn.Text = "Ignore error";

            Add(ignoreBtn);

            // 
            resizeBtn.Text = "Resize text to " + theseSettings.maxLength;
            resizeBtn.X = lookupLab.X;
            resizeBtn.Y = ignoreBtn.Y + 2;

            Add(resizeBtn);

            // build change error elements
            userLab.Text = "Enter new word";
            userLab.X = lookupLab.X;
            userLab.Y = resizeBtn.Y + 2;

            userTxt.X = lookupLab.X;
            userTxt.Y = userLab.Y + 1;
            userTxt.Width = 14;

            userBtn.Text = "Replace";
            userBtn.X = lookupLab.X;
            userBtn.Y = userTxt.Y + 1;

            replaceBtn.Text = "Recommend words";
            replaceBtn.X = lookupLab.X;
            replaceBtn.Y = userBtn.Y + 2;

            Add(userLab, userTxt, userBtn, replaceBtn);

            // 
            acronymBtn.Text = "Replace acronyms";
            acronymBtn.X = lookupLab.X;
            acronymBtn.Y = replaceBtn.Y + 2;

            Add(acronymBtn);

            // 
            addBtn.Text = "Learn spelling";
            addBtn.X = lookupLab.X;
            addBtn.Y = acronymBtn.Y + 2;

            Add(addBtn);

            // 
            HomeBtn.Text = "Home";
            HomeBtn.X = lookupLab.X;
            HomeBtn.Y = addBtn.Y + 2;

            Add(HomeBtn);
        }
    }
}


/////////////////////////
// Views/SpellCheck.cs //
/////////////////////////

// install dependencies
using Terminal.Gui;
using Utilities;
using System.Text.RegularExpressions;
using NStack;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class SpellCheck
    {
        protected int firstIndex;

        protected string? error;
        protected List<string> falseWords = new List<string>();
        protected List<string> words = new List<string>();
        protected List<string> ignoredWords = new List<string>();

        protected Settings theseSettings = new Settings();

        public SpellCheck(string textIn)
        {
            words.Clear();
            falseWords.Clear();
            words = textIn.Split(' ').ToList();

            InitializeComponent();
            DisplayWords();

            if (falseWords.Count == 0)
            {
                LeaveMessage();
            }
            else if (falseWords[0] == "")
            {
                LeaveMessage();
            }

            ignoreBtn.Clicked += () =>
            {
                error = lookupTxt.Text.ToString();

                if (error is not null)
                {
                    ignoredWords.Add(error);

                    MessageBox.Query("Ignored", error + " has been ignored as an erorr", "Ok");

                    DisplayWords();
                }
            };

            acronymBtn.Clicked += () =>
            {
                Settings theseSettings = new Settings();

                if (theseSettings.changeAcronyms)
                {
                    ReaplceAcronyms();

                    MessageBox.Query("Acronyms replaced", "All acronyms have been replaced", "Ok");

                    DisplayWords();
                }
            };

            HomeBtn.Clicked += () =>
            {
                GoHome();
            };

            HomeBtn2.Clicked += () =>
            {
                GoHome();
            };

            userBtn.Clicked += () =>
            {
                error = lookupTxt.Text.ToString();
                string newWord = userTxt.Text.ToString();

                if (newWord is not null)
                {
                    ReplaceUserWord(newWord);
                }

                MessageBox.Query("Replaced", error + " has been replaced to " + newWord, "Ok");

                DisplayWords();
            };

            replaceBtn.Clicked += () =>
            {
                error = lookupTxt.Text.ToString();
                string newWord = "";
                int maxWeight = 1;
                bool loop = true;
                string text;

                if (error is not null && falseWords.Contains(error))
                {
                    BkTree bktree = new BkTree(error);

                    do
                    {
                        string[] stringButtons = bktree.ReturnClosest(maxWeight);
                        ustring[] buttons = new ustring[stringButtons.Length + 1];
                        text = "";

                        for (int a = 0; a < stringButtons.Length; a++)
                        {
                            buttons[a] = (a + 1).ToString();
                            text += (a + 1) + ": " + stringButtons[a] + "   ";
                        }

                        text += "\nPress escape to exit";
                        buttons[buttons.Length - 1] = "More words";

                        int choice = MessageBox.Query("Recommended words: " + buttons.Length, text, buttons);

                        if (choice == -1)
                        {
                            return;
                        }
                        else if (choice == buttons.Length - 1)
                        {
                            maxWeight++;
                        }
                        else
                        {
                            newWord = stringButtons[choice];
                            words[words.IndexOf(error)] = newWord;
                            falseWords.Remove(error);
                            loop = false;

                            MessageBox.Query("Replaced", error + " has been replaced to " + newWord, "Ok");
                        }
                    } while (loop);
                }
                else if (!falseWords.Contains(error))
                {
                    MessageBox.ErrorQuery("Error", error + " is not in the false words list\nMake sure it is spelt correctly and in the list", "Ok");
                }

                DisplayWords();
            };

            addBtn.Clicked += () =>
            {
                error = lookupTxt.Text.ToString();

                using (StreamWriter writer = new StreamWriter("Resources/AddedWords.txt"))
                {
                    writer.Write(error + "\n");
                }

                MessageBox.Query("Spelling learnt", "The spelling of " + error + " has been learnt", "Ok");

                DisplayWords();
            };

            resizeBtn.Clicked += () =>
            {
                ResizeText();

                MessageBox.Query("Text resized", "Text has been resized to " + theseSettings.maxLength, "Ok");

                DisplayWords();
            };
        }

        protected void CheckSpelling()
        {
            Utilities.BloomFilter bloom = new Utilities.BloomFilter();
            falseWords.Clear();

            // check all words in the bloom filter 
            if (words.Count != 0)
            {
                for (int a = 0; a < words.Count; a++)
                {
                    if (!bloom.Lookup(words[a]))
                    {
                        falseWords.Add(words[a]);
                    }
                }
            }

            if (falseWords.Count != 0)
            {
                // check all wrong words in the text file of added words 
                foreach (var a in falseWords)
                {
                    if (bloom.BinarySearch(a))
                    {
                        falseWords.Remove(a);
                    }
                }

                // check all wrong words againt the array of ignored words
                for (int a = 0; a < falseWords.Count; a++)
                {
                    for (int b = 0; b < ignoredWords.Count; b++)
                    {
                        if (falseWords[a] == ignoredWords[b])
                        {
                            falseWords.Remove(ignoredWords[b]);
                        }
                    }
                }
            }
        }

        protected void CheckGrammar()
        {
            int a = 0;

            while (a < words.Count)
            {
                string word = words[a];

                Match match = Regex.Match(word, @"[^\w\s]");

                // if a word contains a special character
                if (match.Success && word.Length != 1 && match.Value != "'")
                {
                    string specialChar = word[match.Index].ToString();
                    string part1 = "";
                    string part2 = "";
                    // checks either side of the special character to ensure it is not null
                    //  then stores the values to new strings 
                    if (word[0] != char.Parse(specialChar))
                    {
                        part1 = word.Substring(0, match.Index);
                    }
                    if (word.IndexOf(specialChar) != (word.Length - 1))
                    {
                        part2 = word.Substring(match.Index + 1);
                    }

                    // creates a sub list
                    List<string> postWords = new List<string>();
                    if (match.Index != (words.Count - 1))
                    {
                        postWords = words.GetRange(a + 1, words.Count - a - 1);
                    }
                    // removes all words after & including special character 
                    words.RemoveRange(a, words.Count - a);
                    // adds the parts containing & including special character
                    if (part1 is not null)
                    {
                        words.Add(part1);
                    }
                    words.Add(specialChar);
                    if (part2 is not null)
                    {
                        words.Add(part2);
                    }
                    // concats both lists together
                    words.AddRange(postWords);

                    a += 2;
                }

                a++;
            }

            falseWords.RemoveAll(item => string.IsNullOrWhiteSpace(item));

            for (int b = 0; b < falseWords.Count; b++)
            {
                Match match = Regex.Match(falseWords[b], @"[^\w]");

                if (match.Success)
                {
                    falseWords.Remove(falseWords[b]);
                }
            }
        }

        protected void LeaveMessage()
        {
            RemoveAll();

            Label message1 = new Label();
            message1.Text = "Spell check complete";
            message1.X = Pos.Center();
            message1.Y = Pos.Center() - 1;

            Label message2 = new Label();
            message2.Text = "No errors found".PadLeft(message1.Text.ToString().Length / 2);
            message2.X = message1.X;
            message2.Y = message1.Y + 1;

            HomeBtn.Text = "Home";
            HomeBtn.X = message1.X;
            HomeBtn.Y = message2.Y + 2;

            Add(message1, message2, HomeBtn);
        }

        protected void DisplayWords()
        {
            // move any special characters to own index
            CheckGrammar();
            // find false words 
            if (theseSettings.spellCheck)
            {
                CheckSpelling();
                CheckGrammar();
            }

            if (falseWords.Count == 0)
            {
                LeaveMessage();
            }
            else if (falseWords[0] == "")
            {
                LeaveMessage();
            }

            int xPos = 2;
            int yPos = 2;
            int thisIndex = firstIndex;

            foreach (var a in wordLabs)
            {
                Remove(a);
            }
            wordLabs.Clear();

            for (int a = 0; a < 41; a++)
            {
                if (thisIndex < falseWords.Count && ignoredWords.Contains(falseWords[thisIndex]) == false)
                {
                    wordLabs.Add(new Label());
                    wordLabs[a] = new Label();
                    wordLabs[a].X = xPos;
                    wordLabs[a].Y = yPos;
                    wordLabs[a].Text = falseWords[thisIndex];

                    Add(wordLabs[a]);

                    yPos++;
                    thisIndex++;
                }

                if (yPos == 22)
                {
                    xPos = 30;
                    yPos = 2;
                }
            }
        }

        protected void ReaplceAcronyms()
        {
            string path = "Resources/Acronyms.txt";
            string[] acronyms = File.ReadAllLines(path);
            string[] shortAcr = new string[acronyms.Length];
            string[] fullAcr = new string[acronyms.Length];

            for (int a = 0; a < acronyms.Length; a++)
            {
                string[] parts = acronyms[a].Split('*', 2);
                shortAcr[a] = parts[0];
                fullAcr[a] = parts[1];
            }

            for (int a = 0; a < falseWords.Count; a++)
            {
                for (int b = 0; b < acronyms.Length; b++)
                {
                    if (falseWords[a] == shortAcr[b])
                    {
                        falseWords[a] = fullAcr[b];

                        int index = words.IndexOf(shortAcr[b]);
                        words[index] = falseWords[a];
                    }
                }
            }
        }

        protected void ReplaceUserWord(string newWord)
        {
            int index = falseWords.IndexOf(error);

            if (index != -1)
            {
                falseWords[index] = newWord;
                words[index] = newWord;
            }
        }

        protected void ResizeText()
        {
            string text = "";

            foreach (var a in words)
            {
                text += a + " ";
            }

            if (theseSettings.maxLength != 0)
            {
                text = text.Substring(0, theseSettings.maxLength);
            }

            words = text.Split(' ').ToList();
        }

        protected void GoHome()
        {
            string text = "";

            foreach (var a in words)
            {
                text += a + " ";
            }

            text = FixGrammar(text);

            Application.Run(new MainView(text));
        }

        protected string FixGrammar(string text)
        {
            int speechCount = 0;

            for (int a = 0; a < text.Length; a++)
            {
                switch (text[a])
                {
                    // need character before and space after
                    case '.':
                    case ',':
                    case '!':
                    case '?':
                    case ':':
                    case ';':
                    case ')':

                        // before
                        if (a != 0)
                        {
                            if (char.IsWhiteSpace(text[a - 1]))
                            {
                                text = text.Remove(a - 1, 1);
                            }
                        }

                        // after
                        if (a != text.Length - 1)
                        {
                            if (!char.IsWhiteSpace(text[a + 1]))
                            {
                                string tempText = text.Substring(a + 1);
                                text = text.Substring(0, a + 1);
                                text += " ";
                                text += tempText;
                            }
                        }

                        break;

                    // need character before and after 
                    case '/':

                        // before
                        if (a != 0)
                        {
                            if (char.IsWhiteSpace(text[a - 1]))
                            {
                                text = text.Remove(a - 1, 1);
                            }
                        }

                        // after 
                        if (a != text.Length - 1)
                        {
                            if (char.IsWhiteSpace(text[a]))
                            {
                                text = text.Remove(a, 1);
                            }
                        }

                        break;

                    // need space before and character after
                    case '(':

                        // before 
                        if (a != 0)
                        {
                            if (char.IsWhiteSpace(text[a - 1]))
                            {
                                string tempText = text.Substring(a);
                                text = text.Substring(0, a - 1);
                                text += " ";
                                text += tempText;
                            }
                        }

                        // after 
                        if (a != text.Length - 1)
                        {
                            if (char.IsWhiteSpace(text[a + 1]))
                            {
                                text = text.Remove(a + 1, 1);
                            }
                        }

                        break;
                }
            }

            return text;
        }
    }
}


///////////////////////
// Views/MainView.cs //
///////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class MainView
    {
        protected int length = 0;

        public MainView()
        {
            BuildAll();
        }

        // used when coming from the spell check view
        // so the text field will have all the corrected words 
        public MainView(string text)
        {
            BuildAll();

            textEntry.Text = text;
        }

        public void BuildAll()
        {
            InitializeComponent();

            spellBtn.Clicked += () =>
            {
                string text = textEntry.Text.ToString();

                if (text is null)
                {
                    MessageBox.Query("Spell check complete", "No incorrect words", "OK");
                }
                else
                {
                    Application.Run(new SpellCheck(text));
                }
            };

            clearBtn.Clicked += () =>
            {
                textEntry.Text = "";
            };
        }
    }
}


/////////////////////////
// Views/Dictionary.cs //
/////////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class Dictionary
    {
        public string[] words;
        protected string? currentLookup;
        protected List<string> toDisplay = new List<string>();

        protected int firstIndex;
        protected int currentFilter;


        public Dictionary()
        {
            words = FetchAllWords();
            firstIndex = 0;
            currentFilter = filterRad.SelectedItem;

            UpdateWords();

            InitializeComponent();

            lookupBtn.Clicked += () =>
            {
                Lookup(0);
            };

            nextBtn.Clicked += () =>
            {
                NextPage();
            };

            prevBtn.Clicked += () =>
            {
                PrevPage();
            };

            defineBtn.Clicked += () =>
            {
                currentLookup = lookupTxt.Text.ToString();

                if (currentLookup is not null)
                {
                    DefineThis(currentLookup);
                }
                else
                {
                    MessageBox.ErrorQuery("Error", "There is no word to define\nEnter a value in the lookup field", "Ok");
                }
            };

            addBtn.Clicked += () =>
            {
                currentLookup = lookupTxt.Text.ToString();

                if (currentLookup is not null && !currentLookup.Contains(" "))
                {
                    AddThis(currentLookup);
                    UpdateWords();
                }
                else
                {
                    MessageBox.ErrorQuery("Error", "There is no word to add to the dictionary\nEnter a value in the lookup field", "Ok");
                }
            };

            removeBtn.Clicked += () =>
            {
                currentLookup = lookupTxt.Text.ToString();
                if (currentLookup is not null)
                {
                    RemoveThis(currentLookup);
                    UpdateWords();
                }
                else
                {
                    MessageBox.ErrorQuery("Error", "There is no word to remove fomr the dictionary\nEnter a value in the lookup field", "Ok");
                }
            };

            filterBtn.Clicked += () =>
            {
                currentFilter = filterRad.SelectedItem;
                UpdateWords();
            };
        }

        protected string[] FetchAllWords()
        {
            string defPath = "Resources/TrueWords.txt";
            string addedPath = "Resources/AddedWords.txt";

            List<string> words = File.ReadAllLines(defPath).ToList();
            List<string> addedWords = File.ReadAllLines(addedPath).ToList();
            words.AddRange(addedWords);
            words.Sort();
            string[] values = words.ToArray();

            return values;
        }

        protected string[] FetchWords(int num)
        {
            string path;

            if (num == 1)
            {
                path = "Resources/TrueWords.txt";
            }
            else
            {
                path = "Resources/AddedWords.txt";
            }

            words = File.ReadAllLines(path);
            return words;
        }

        protected void NextPage()
        {
            firstIndex += 20;
            if ((toDisplay is null && firstIndex > words.Length) || (toDisplay is not null && firstIndex > toDisplay.Count))
            {
                firstIndex -= 20;
            }

            Lookup(firstIndex);
        }

        protected void PrevPage()
        {
            if (firstIndex != 0)
            {
                firstIndex = firstIndex - 20;
            }

            Lookup(firstIndex);
        }

        protected void Lookup(int firstIndexIn)
        {
            firstIndex = firstIndexIn;
            currentLookup = lookupTxt.Text.ToString();

            UpdateWords();
        }

        protected void UpdateWords()
        {
            if (currentFilter == 0)
            {
                FetchAllWords();
            }
            else
            {
                FetchWords(currentFilter);
            }

            foreach (var a in wordLabs)
            {
                Remove(a);
            }
            toDisplay.Clear();

            if (currentLookup is null)
            {
                toDisplay = words.ToList();
            }

            else
            {
                for (int a = 0; a < words.Length; a++)
                {
                    if (words[a].StartsWith(currentLookup))
                    {
                        toDisplay.Add(words[a]);
                    }
                }
            }

            DisplayLabels(toDisplay);
        }

        protected void DisplayLabels(List<string> toDisplay)
        {
            int yPos = 2;
            int count = 0;
            int thisIndex = firstIndex;
            int lastIndex = firstIndex + 20;

            while (thisIndex < lastIndex)
            {
                if (thisIndex < toDisplay.Count)
                {
                    wordLabs[count] = new Label();
                    wordLabs[count].X = 2;
                    wordLabs[count].Y = yPos;
                    wordLabs[count].Text = toDisplay[thisIndex];

                    Add(wordLabs[count]);
                }
                else
                {
                    break;
                }

                count++;
                yPos++;
                thisIndex++;
            }
        }

        protected void DefineThis(string word)
        {
            try
            {
                List<string> definitions = DefineWords.Program.DefineWord(word);

                string definitionstring = "";
                for (int a = 0; a < definitions.Count; a++)
                {
                    definitionstring += definitions[a];
                    definitionstring += "\n";
                }

                MessageBox.Query("Definitions of " + word, definitionstring, "Ok");
            }
            catch (Exception e)
            {
                MessageBox.ErrorQuery("Error", "Word could not be defined\n" + e.Message, "Ok");
            }
        }

        protected void AddThis(string word)
        {
            string path = "Resources/AddedWords.txt";
            string[] words = File.ReadAllLines(path);

            if (!words.Contains(word))
            {
                List<string> newWords = new List<string>();

                newWords = words.ToList();
                newWords.Add(word);
                newWords.Sort();

                string[] toWrite = newWords.ToArray();
                File.WriteAllLines(path, toWrite);
            }

            MessageBox.Query("Word added", word + " has been added to the dictionary", "Ok");
        }

        protected void RemoveThis(string word)
        {
            string path = "/Users/lewisdrake/NEA/FINAL/Resources/AddedWords.txt";
            string[] words = File.ReadAllLines(path);

            if (words.Contains(word))
            {
                List<string> newWords = new List<string>();

                newWords = words.ToList();
                newWords.Remove(word);
                newWords.Sort();

                string[] toWrite = newWords.ToArray();
                File.WriteAllLines(path, toWrite);
            }

            MessageBox.Query("Word removed", word + " has been removed from the dictionary", "Ok");
        }

        protected void FilterList(int choice)
        {
            if (choice == 1)
            {
                string path = "Resources/TrueWords.txt";
                string[] words = File.ReadAllLines(path);
            }
            if (choice == 2)
            {
                string path = "Resources/AddedWords.txt";
                string[] words = File.ReadAllLines(path);
            }

            UpdateWords();
        }
    }
}


/////////////////////////
// Views/MasterView.cs //
/////////////////////////

// install dependencies

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class MasterView
    {
        public MasterView()
        {
            Build();
        }
    }
}


///////////////////////
// Views/Settings.cs //
///////////////////////

// install dependencies
using Terminal.Gui;

// suppress warnings
# pragma warning disable

namespace Views
{
    public partial class Settings
    {
        public bool spellCheck;
        public bool changeAcronyms;
        public bool grammarCheck;

        public int maxLength;

        public Color background;
        public Color foreground;

        public Settings()
        {
            FetchSettings();

            InitializeComponent();

            saveBtn.Clicked += () =>
            {
                SaveSettings();
            };
            viewDictBtn.Clicked += () =>
            {
                Application.Run(new Dictionary());
            };
            resetBtn.Clicked += () =>
            {
                ResetSettings();
            };
        }

        protected void SaveSettings()
        {
            spellCheck = spellCheckCbx.Checked;
            changeAcronyms = changeAcronymsCbx.Checked;
            grammarCheck = grammarCheckCbx.Checked;

            if (!int.TryParse(maxLengthTxt.Text.ToString(), out maxLength))
            {
                MessageBox.ErrorQuery("Error", "The input for max length must be a whole number\nFor no max length, enter 0", "Ok");

                return;
            }

            string settings = "Spell " + spellCheck + "\n"
                + "Lengt " + maxLength + "\n"
                + "Acron " + changeAcronyms + "\n"
                + "Grama " + grammarCheck + "\n"
                + "Foreg " + foregroundPick.SelectedColor + "\n"
                + "Backg " + backgroundPick.SelectedColor + "\n"
                ;

            string path = "Resources/Settings.txt";
            File.WriteAllText(path, settings);

            FetchSettings();
            MessageBox.Query("Saved", "Settings saved successfully", "Ok");
        }

        public void FetchSettings()
        {
            string path = "Resources/Settings.txt";
            string[] settings = File.ReadAllLines(path);

            spellCheck = bool.Parse(settings[0].Substring(6));
            maxLength = int.Parse(settings[1].Substring(6));
            changeAcronyms = bool.Parse(settings[2].Substring(6));
            grammarCheck = bool.Parse(settings[3].Substring(6));
            foreground = GetColour(settings[4].Substring(6));
            background = GetColour(settings[5].Substring(6));

            Colors.Base.Normal = Application.Driver.MakeAttribute(foreground, background);
        }

        protected void ResetSettings()
        {
            spellCheck = true;
            maxLength = 0;
            changeAcronyms = true;
            grammarCheck = false;
            foreground = Color.Gray;
            background = Color.Blue;

            string settings = "Spell " + spellCheck + "\n"
                + "Lengt " + maxLength + "\n"
                + "Acron " + changeAcronyms + "\n"
                + "Grama " + grammarCheck + "\n"
                + "Foreg " + foreground + "\n"
                + "Backg " + background + "\n"
                ;

            string path = "Resources/Settings.txt";
            File.WriteAllText(path, settings);

            FetchSettings();
            MessageBox.Query("Reset", "Settings reset to default successfully", "Ok");
        }

        protected Color GetColour(string colourStr)
        {
            switch (colourStr)
            {
                case "Black":
                    return Color.Black;
                case "Blue":
                    return Color.Blue;
                case "BrightBlue":
                    return Color.BrightBlue;
                case "BrightCyan":
                    return Color.BrightCyan;
                case "BrightGreen":
                    return Color.BrightGreen;
                case "BrightMagenta":
                    return Color.BrightMagenta;
                case "BrightRed":
                    return Color.BrightRed;
                case "BrightYellow":
                    return Color.BrightYellow;
                case "Brown":
                    return Color.Brown;
                case "Cyan":
                    return Color.Cyan;
                case "DarkGray":
                    return Color.DarkGray;
                case "Gray":
                    return Color.Gray;
                case "Green":
                    return Color.Green;
                case "Magenta":
                    return Color.Magenta;
                case "Red":
                    return Color.Red;
                case "White":
                    return Color.White;
            }

            return Color.Black;
        }
    }
}


